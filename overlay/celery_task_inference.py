import os
import uuid
import json
import time
from pathlib import Path
from celery import shared_task

@shared_task(name="celery_task.generate_video_inference_task")
def generate_video_inference_task(
    prompt,
    negative_prompt=None,
    image_base64=None,
    width=1280,
    height=720,
    num_frames=120,
    seed=0,
    output_path=None
):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ inference –¥–µ–º–æ–Ω"""
    print(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ inference –¥–µ–º–æ–Ω...")
    print(f"üìù –ü—Ä–æ–º–ø—Ç: {prompt}")
    print(f"üìè –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {width}x{height}")
    print(f"üéûÔ∏è –ö–∞–¥—Ä—ã: {num_frames}")
    print(f"üé≤ Seed: {seed}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ base64
    image_path = None
    if image_base64:
        import base64
        from PIL import Image
        import io
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
        image_data = base64.b64decode(image_base64.split(',')[1] if ',' in image_base64 else image_base64)
        image = Image.open(io.BytesIO(image_data))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–¥–ª—è JPEG)
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        image_path = f"temp_image_{uuid.uuid4().hex}.jpg"
        image.save(image_path)
        print(f"üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {image_path}")
    else:
        # –î–ª—è text-to-video —Ä–µ–∂–∏–º–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_path = None
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    command_id = uuid.uuid4().hex
    command_file = f"inference_commands/command_{command_id}.json"
    result_file = f"inference_commands/result_{command_id}.json"
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥–µ–º–æ–Ω–∞
    command = {
        'prompt': prompt,
        'negative_prompt': negative_prompt or "worst quality, inconsistent motion, blurry, jittery, distorted",
        'image_path': image_path,
        'height': height,
        'width': width,
        'num_frames': num_frames,
        'seed': seed,
        'output_path': output_path
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥
    os.makedirs("inference_commands", exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    with open(command_file, 'w') as f:
        json.dump(command, f)
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–µ–º–æ–Ω—É: {command_file}")
    
    # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –¥–µ–º–æ–Ω–∞
    max_wait_time = 3600  # 1 —á–∞—Å
    start_time = time.time()
    
    while time.time() - start_time < max_wait_time:
        if os.path.exists(result_file):
            try:
                # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                with open(result_file, 'r') as f:
                    result_data = json.load(f)
                
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                os.remove(result_file)
                
                if result_data['status'] == 'success':
                    print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    
                    # –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ task_results
                    video_path = result_data['result']
                    final_path = f"task_results/result_{uuid.uuid4().hex}.mp4"
                    os.makedirs("task_results", exist_ok=True)
                    
                    import shutil
                    shutil.copy2(video_path, final_path)
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if image_path and image_path.startswith("temp_image_"):
                        os.remove(image_path)
                    
                    return final_path
                else:
                    raise Exception(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω–µ: {result_data['error']}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
                raise e
        
        time.sleep(2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    
    # –¢–∞–π–º–∞—É—Ç
    raise Exception("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç –¥–µ–º–æ–Ω–∞") 