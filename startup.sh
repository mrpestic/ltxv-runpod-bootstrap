#!/bin/bash
set -euo pipefail

# –ü—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É, –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∞–º startup.sh (—Ñ–∏–∫—Å –¥–æ –ª—é–±—ã—Ö cd)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
trap 'echo "üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º..."; exit 0' SIGTERM SIGINT

echo "üîß –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
cd /workspace

export DEBIAN_FRONTEND=noninteractive
export HF_HOME=/workspace/.cache/huggingface
export HUGGINGFACE_HUB_CACHE=/workspace/.cache/huggingface
export TRANSFORMERS_CACHE=/workspace/.cache/huggingface
export DIFFUSERS_CACHE=/workspace/.cache/huggingface
mkdir -p "$HF_HOME"

# –ë–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã (git/rsync/venv)
apt-get update -y
apt-get install -y --no-install-recommends git rsync python3-venv

# ‚îÄ‚îÄ 1) –ß–∏—Å—Ç—ã–π LTX-Video ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LTX_DIR="/workspace/LTX-Video"
LTX_REPO_URL="${LTX_REPO_URL:-https://github.com/Lightricks/LTX-Video.git}"
LTX_BRANCH="${LTX_BRANCH:-main}"

if [ -d "$LTX_DIR" ]; then
  echo "[LTX] –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π LTX-Video –∏ –∫–ª–æ–Ω–∏—Ä—É—é –∑–∞–Ω–æ–≤–æ"
  rm -rf "$LTX_DIR"
fi

echo "[LTX] –ö–ª–æ–Ω–∏—Ä—É–µ–º LTX-Video –∏–∑ $LTX_REPO_URL (branch=$LTX_BRANCH)"
git clone --depth 1 --branch "$LTX_BRANCH" "$LTX_REPO_URL" "$LTX_DIR"
echo "[LTX] –ì–æ—Ç–æ–≤–æ: $LTX_DIR"

# ‚îÄ‚îÄ 2) –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º overlay ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
MY_OVERLAY="$SCRIPT_DIR/overlay"
echo "[Overlay] SCRIPT_DIR=$SCRIPT_DIR"
echo "[Overlay] –û–∂–∏–¥–∞—é –ø–æ—è–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏: $MY_OVERLAY"

for i in $(seq 1 30); do
  if [ -d "$MY_OVERLAY" ]; then
    echo "[Overlay] –ù–∞–π–¥–µ–Ω–∞ overlay (—á–µ—Ä–µ–∑ $((i*2))—Å)"
    break
  fi
  echo "[Overlay] overlay –µ—â—ë –Ω–µ—Ç, –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞... ($i/30)"
  sleep 2
done

if [ -d "$MY_OVERLAY" ]; then
  echo "[Overlay] –ö–æ–ø–∏—Ä—É—é —Ñ–∞–π–ª—ã –∏–∑ $MY_OVERLAY -> $LTX_DIR"
  rsync -a --exclude '.git' "$MY_OVERLAY"/ "$LTX_DIR"/
else
  echo "[Overlay] –í–ù–ò–ú–ê–ù–ò–ï: overlay —Ç–∞–∫ –∏ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
fi

# ‚îÄ‚îÄ 3) venv + –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
VENV_DIR="$LTX_DIR/env"

# –°–æ–∑–¥–∞–¥–∏–º venv, –µ—Å–ª–∏ –Ω–µ—Ç
if [ ! -x "$VENV_DIR/bin/python" ]; then
  echo "üå± –°–æ–∑–¥–∞—ë–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
  python3 -m venv "$VENV_DIR"
fi

# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º venv (–¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è "pip")
# –∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –±—É–¥–µ–º –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –∫ –±–∏–Ω–∞—Ä—è–º
# shellcheck disable=SC1090
source "$VENV_DIR/bin/activate"

# –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —ç—Ç–æ Python-–ø—Ä–æ–µ–∫—Ç
cd "$LTX_DIR"
if [ ! -f "pyproject.toml" ] && [ ! -f "setup.py" ]; then
  echo "‚ùå –ù–µ—Ç pyproject.toml/setup.py –≤ $LTX_DIR"
  echo "PWD=$(pwd)"; ls -la
  exit 1
fi

if ! "$VENV_DIR/bin/pip" show ltx-video > /dev/null 2>&1; then
  echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ LTX-Video (PWD=$(pwd))..."
  "$VENV_DIR/bin/python" -m pip install --upgrade pip
  "$VENV_DIR/bin/python" -m pip install -e '.[inference-script]'
else
  echo "‚úÖ LTX-Video —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É"
fi

# ‚îÄ‚îÄ 4) –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if ! command -v ffmpeg >/dev/null 2>&1; then
  echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ffmpeg..."
  apt-get update -y
  apt-get install -y --no-install-recommends ffmpeg
else
  echo "‚úÖ ffmpeg —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
fi

# ‚îÄ‚îÄ 5) Python-–±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if ! "$VENV_DIR/bin/pip" show av > /dev/null 2>&1; then
  "$VENV_DIR/bin/pip" install -U av
else
  echo "‚úÖ av —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi
if ! "$VENV_DIR/bin/pip" show imageio > /dev/null 2>&1; then
  "$VENV_DIR/bin/pip" install -U imageio
else
  echo "‚úÖ imageio —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi
if ! "$VENV_DIR/bin/pip" show imageio-ffmpeg > /dev/null 2>&1; then
  "$VENV_DIR/bin/pip" install -U imageio-ffmpeg
else
  echo "‚úÖ imageio-ffmpeg —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# ‚îÄ‚îÄ 6) diffusers + huggingface_hub ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if ! ( "$VENV_DIR/bin/pip" show diffusers >/dev/null 2>&1 && "$VENV_DIR/bin/pip" show huggingface_hub >/dev/null 2>&1 ); then
  echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º diffusers –∏ huggingface_hub..."
  "$VENV_DIR/bin/pip" install -U git+https://github.com/huggingface/diffusers
  "$VENV_DIR/bin/pip" install -U huggingface_hub
else
  echo "‚úÖ diffusers –∏ huggingface_hub —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
fi

# ‚îÄ‚îÄ 7) –õ–æ–≥–∏–Ω –≤ Hugging Face (–º—è–≥–∫–∏–π) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
echo "üîê –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω Hugging Face..."
if [ -n "${HF_TOKEN:-}" ]; then
  echo "üîê HF: –ª–æ–≥–∏–Ω—é—Å—å –ø–æ HF_TOKEN..."
  "$VENV_DIR/bin/huggingface-cli" login --token "$HF_TOKEN" || echo "‚ö†Ô∏è HF: —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ –ª–æ–≥–∏–Ω–∞"
else
  echo "‚ÑπÔ∏è HF: —Ç–æ–∫–µ–Ω –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –ª–æ–≥–∏–Ω"
fi

# ‚îÄ‚îÄ 8) –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è API/Celery/Redis (pip) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if ! ( "$VENV_DIR/bin/pip" show fastapi >/dev/null 2>&1 && "$VENV_DIR/bin/pip" show celery >/dev/null 2>&1 && "$VENV_DIR/bin/pip" show redis >/dev/null 2>&1 ); then
  echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è API, Celery –∏ Redis..."
  "$VENV_DIR/bin/pip" install "fastapi[all]" celery redis
else
  echo "‚úÖ FastAPI, Celery –∏ Redis (pip) —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
fi

# Redis-—Å–µ—Ä–≤–µ—Ä (—Å–∏—Å—Ç–µ–º–Ω—ã–π)
apt-get update -y
apt-get install -y --no-install-recommends redis-server

# ‚îÄ‚îÄ 9) –í–µ—Å—ã –º–æ–¥–µ–ª–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
cd "$LTX_DIR"
if [ ! -f "models/ltxv-13b-0.9.8-distilled/model.safetensors" ]; then
  echo "üé¨ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—ã –º–æ–¥–µ–ª–∏..."
  "$VENV_DIR/bin/python" download_weights.py
else
  echo "‚úÖ –í–µ—Å–∞ –º–æ–¥–µ–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
fi

# ‚îÄ‚îÄ 10) –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
echo "üö¶ –ó–∞–ø—É—Å–∫–∞–µ–º Redis..."
redis-server --daemonize yes
sleep 2

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–µ–º–æ–Ω–∞
wait_for_daemon() {
  local max_wait=300
  local elapsed=0
  local check_interval=10
  echo "‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ inference –¥–µ–º–æ–Ω–∞ (–º–∞–∫—Å–∏–º—É–º ${max_wait}—Å)..."
  while [ $elapsed -lt $max_wait ]; do
    if [ -f "/workspace/LTX-Video/daemon_ready.flag" ]; then
      echo "‚úÖ –î–µ–º–æ–Ω –≥–æ—Ç–æ–≤! –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${elapsed}—Å"
      return 0
    fi
    if ! pgrep -f "run_inference_daemon_official.py" > /dev/null; then
      echo "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –¥–µ–º–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
      return 1
    fi
    echo "‚åõ –î–µ–º–æ–Ω –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è... ${elapsed}—Å (–æ—Å—Ç–∞–ª–æ—Å—å: $((max_wait - elapsed))—Å)"
    sleep $check_interval
    elapsed=$((elapsed + check_interval))
  done
  echo "‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ–º–æ–Ω–∞ (${max_wait}—Å)!"
  echo "üìã –õ–æ–≥–∏: tail -f /workspace/LTX-Video/inference_daemon_official.log"
  return 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
check_process() {
  local process_name=$1
  local log_file=$2
  local pid
  pid=$(pgrep -f "$process_name" | head -1 || true)
  if [ -n "${pid:-}" ]; then
    echo "‚úÖ $process_name –∑–∞–ø—É—â–µ–Ω (PID: $pid)"
    return 0
  else
    echo "‚ùå $process_name –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
    echo "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f $log_file"
    return 1
  fi
}

echo "üö¶ –ó–∞–ø—É—Å–∫–∞–µ–º inference –¥–µ–º–æ–Ω (–ª–æ–≥–∏ –≤ inference_daemon_official.log)..."
cd "$LTX_DIR"
nohup "$VENV_DIR/bin/python" run_inference_daemon_official.py > inference_daemon_official.log 2>&1 &
DAEMON_PID=$!
echo "üìã –î–µ–º–æ–Ω –∑–∞–ø—É—â–µ–Ω —Å PID: $DAEMON_PID"

sleep 5
if ! kill -0 $DAEMON_PID 2>/dev/null; then
  echo "‚ùå –î–µ–º–æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞! –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞:"
  tail -n 20 inference_daemon_official.log || true
  exit 1
fi
echo "‚úÖ –î–µ–º–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω, –∂–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π..."

if wait_for_daemon; then
  echo "üéâ –î–µ–º–æ–Ω –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã..."
else
  echo "üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –¥–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
  echo "üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞:"
  tail -n 10 inference_daemon_official.log || true
  exit 1
fi

echo "üö¶ –ó–∞–ø—É—Å–∫–∞–µ–º Celery –≤–æ—Ä–∫–µ—Ä (–ª–æ–≥–∏ –≤ celery_worker.log)..."
cd "$LTX_DIR"
nohup "$VENV_DIR/bin/celery" -A my_celery worker --loglevel=info --concurrency=1 > celery_worker.log 2>&1 &
sleep 3

echo "üö¶ –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä (–ª–æ–≥–∏ –≤ api_server.log)..."
nohup "$VENV_DIR/bin/python" run_api_server.py > api_server.log 2>&1 &
sleep 2

echo "üö¶ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–ª–æ–≥–∏ –≤ frontend_server.log)..."
nohup "$VENV_DIR/bin/python" run_frontend_server.py > frontend_server.log 2>&1 &

echo -e "\n\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 3

echo "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
check_process "run_inference_daemon_official.py" "inference_daemon_official.log"
check_process "celery.*my_celery" "celery_worker.log"
check_process "run_api_server.py" "api_server.log"
check_process "run_frontend_server.py" "frontend_server.log"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–µ–º–æ–Ω–∞
if [ -f "/workspace/LTX-Video/daemon_ready.flag" ]; then
  READY_TIME=$(cut -d: -f2 < /workspace/LTX-Video/daemon_ready.flag)
  echo "üèÅ Inference –¥–µ–º–æ–Ω –≥–æ—Ç–æ–≤ (–≤—Ä–µ–º—è: $(date -d @"$READY_TIME" 2>/dev/null || echo "$READY_TIME"))"
else
  echo "‚ö†Ô∏è –§–∞–π–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–µ–º–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
echo "üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã:"
if ss -tlnp | grep -q ":8000"; then
  echo "‚úÖ API —Å–µ—Ä–≤–µ—Ä (–ø–æ—Ä—Ç 8000)"
else
  echo "‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8000"
fi
if ss -tlnp | grep -q ":8002"; then
  echo "‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä (–ø–æ—Ä—Ç 8002)"
else
  echo "‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8002"
fi

echo "--------------------------------------------------------"
echo "‚û°Ô∏è  –§—Ä–æ–Ω—Ç–µ–Ω–¥: http://<–í–ê–®_IP>:8002/frontend.html"
echo "‚û°Ô∏è  API docs: http://<–í–ê–®_IP>:8000/docs"
echo "--------------------------------------------------------"
echo "üëÄ –õ–æ–≥–∏:"
echo "   tail -f /workspace/LTX-Video/inference_daemon_official.log"
echo "   tail -f /workspace/LTX-Video/celery_worker.log"
echo "   tail -f /workspace/LTX-Video/api_server.log"
echo "   tail -f /workspace/LTX-Video/frontend_server.log"
echo "--------------------------------------------------------"
echo "üõ°Ô∏è –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å—ã –∂–∏–≤—ã–º–∏..."

# ‚îÄ‚îÄ –°—Ç—Ä–∞–∂: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏—è—Ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
while true; do
  sleep 30

  if ! pgrep -f "run_inference_daemon_official.py" >/dev/null; then
    echo "‚ö†Ô∏è Inference –¥–µ–º–æ–Ω —É–ø–∞–ª! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º..."
    cd "$LTX_DIR"
    nohup "$VENV_DIR/bin/python" run_inference_daemon_official.py > inference_daemon_restart.log 2>&1 &
  fi

  if ! pgrep -f "celery.*my_celery" >/dev/null; then
    echo "‚ö†Ô∏è Celery –≤–æ—Ä–∫–µ—Ä —É–ø–∞–ª! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º..."
    cd "$LTX_DIR"
    nohup "$VENV_DIR/bin/celery" -A my_celery worker --loglevel=info --concurrency=1 > celery_worker_restart.log 2>&1 &
  fi

  if ! pgrep -f "run_api_server.py" >/dev/null; then
    echo "‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä —É–ø–∞–ª! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º..."
    cd "$LTX_DIR"
    nohup "$VENV_DIR/bin/python" run_api_server.py > api_server_restart.log 2>&1 &
  fi
done