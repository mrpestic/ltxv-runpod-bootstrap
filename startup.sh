#!/bin/bash

set -euo pipefail

# >>> –î–û–ë–ê–í–¨ –≠–¢–û –°–†–ê–ó–£ –ü–û–°–õ–ï set -euo pipefail <<<
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# ^ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∞–º startup.sh, —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –¥–æ –ª—é–±—ã—Ö cd


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
trap 'echo "üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º..."; exit 0' SIGTERM SIGINT

echo "üîß –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
cd /workspace

export DEBIAN_FRONTEND=noninteractive
export HF_HOME=/workspace/.cache/huggingface
export HUGGINGFACE_HUB_CACHE=/workspace/.cache/huggingface
export TRANSFORMERS_CACHE=/workspace/.cache/huggingface
export DIFFUSERS_CACHE=/workspace/.cache/huggingface
mkdir -p "$HF_HOME"
apt-get update -y
apt-get install -y --no-install-recommends git

### ‚îÄ‚îÄ 1) –ö–ª–æ–Ω–∏—Ä—É–µ–º —á–∏—Å—Ç—ã–π LTX-Video ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LTX_DIR="/workspace/LTX-Video"
LTX_REPO_URL="${LTX_REPO_URL:-https://github.com/Lightricks/LTX-Video.git}"
LTX_BRANCH="${LTX_BRANCH:-main}"

if [ -d "$LTX_DIR" ]; then
    echo "[LTX] –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π LTX-Video –∏ –∫–ª–æ–Ω–∏—Ä—É—é –∑–∞–Ω–æ–≤–æ"
    rm -rf "$LTX_DIR"
fi

echo "[LTX] –ö–ª–æ–Ω–∏—Ä—É–µ–º LTX-Video –∏–∑ $LTX_REPO_URL (branch=$LTX_BRANCH)"
git clone --depth 1 --branch "$LTX_BRANCH" "$LTX_REPO_URL" "$LTX_DIR"
echo "[LTX] –ì–æ—Ç–æ–≤–æ: $LTX_DIR"

### ‚îÄ‚îÄ 2) –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –º–æ–∏ —Ñ–∞–π–ª—ã –ø–æ–≤–µ—Ä—Ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
MY_OVERLAY="$SCRIPT_DIR/overlay"

echo "[Overlay] SCRIPT_DIR=$SCRIPT_DIR"
echo "[Overlay] –û–∂–∏–¥–∞—é –ø–æ—è–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏: $MY_OVERLAY"

# –ò–Ω–æ–≥–¥–∞ repo –µ—â—ë –¥–æ–∫–∞—á–∏–≤–∞–µ—Ç—Å—è ‚Äî –ø–æ–¥–æ–∂–¥—ë–º –¥–æ 60—Å
for i in $(seq 1 30); do
  if [ -d "$MY_OVERLAY" ]; then
    echo "[Overlay] –ù–∞–π–¥–µ–Ω–∞ overlay (—á–µ—Ä–µ–∑ $((i*2))—Å)"
    break
  fi
  echo "[Overlay] overlay –µ—â—ë –Ω–µ—Ç, –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞... ($i/30)"
  sleep 2
done

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ rsync –µ—Å—Ç—å
if ! command -v rsync >/dev/null 2>&1; then
  echo "[Overlay] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é rsync..."
  apt-get update -y && apt-get install -y rsync
fi

if [ -d "$MY_OVERLAY" ]; then
  echo "[Overlay] –ö–æ–ø–∏—Ä—É—é —Ñ–∞–π–ª—ã –∏–∑ $MY_OVERLAY -> $LTX_DIR"
  rsync -a --exclude '.git' "$MY_OVERLAY"/ "$LTX_DIR"/
else
  echo "[Overlay] –í–ù–ò–ú–ê–ù–ò–ï: overlay —Ç–∞–∫ –∏ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"
fi

# 2. –°–æ–∑–¥–∞—ë–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
if [ ! -d "env" ]; then
    echo "üå± –°–æ–∑–¥–∞—ë–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
    python3 -m venv env
fi

source env/bin/activate

# 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
if ! pip show ltx-video > /dev/null 2>&1; then
    echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ LTX-Video..."
    python -m pip install --upgrade pip
    python -m pip install -e .\[inference-script\]
else
    echo "‚úÖ LTX-Video —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É"
fi

echo "üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
if ! command -v ffmpeg >/dev/null 2>&1; then
    echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ffmpeg..."
    apt-get update -y
    apt-get install -y --no-install-recommends ffmpeg
else
    echo "‚úÖ ffmpeg —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
fi

echo "üêç –ü—Ä–æ–≤–µ—Ä—è–µ–º Python-–±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ..."
if ! pip show av > /dev/null 2>&1; then
    pip install -U av
else
    echo "‚úÖ av —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
fi
if ! pip show imageio > /dev/null 2>&1; then
    pip install -U imageio
else
    echo "‚úÖ imageio —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
fi
if ! pip show imageio-ffmpeg > /dev/null 2>&1; then
    pip install -U imageio-ffmpeg
else
    echo "‚úÖ imageio-ffmpeg —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
fi


# 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º diffusers –∏ huggingface_hub (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
if ! (pip show diffusers > /dev/null 2>&1 && pip show huggingface_hub > /dev/null 2>&1); then
    echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º diffusers –∏ huggingface_hub..."
    pip install -U git+https://github.com/huggingface/diffusers
    pip install huggingface_hub
else
    echo "‚úÖ diffusers –∏ huggingface_hub —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
fi

# 5. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Hugging Face (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ /root/.cache/huggingface)
echo "üîê –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ Hugging Face..."
huggingface-cli login --token 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

if ! (pip show fastapi > /dev/null 2>&1 && pip show celery > /dev/null 2>&1 && pip show redis > /dev/null 2>&1); then
    echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è API, Celery –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
    pip install "fastapi[all]" celery redis
else
    echo "‚úÖ FastAPI, Celery –∏ Redis —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
fi

# redis-server –Ω—É–∂–µ–Ω –Ω–∞ —Å–∏—Å—Ç–µ–º–µ (apt install), –µ—Å–ª–∏ –Ω–µ —Å—Ç–æ–∏—Ç
apt-get update -y
apt-get install -y --no-install-recommends redis-server

# 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—ã –º–æ–¥–µ–ª–∏
if [ ! -f "models/ltxv-13b-0.9.8-distilled/model.safetensors" ]; then
    echo "üé¨ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—ã –º–æ–¥–µ–ª–∏..."
    python download_weights.py
else
    echo "‚úÖ –í–µ—Å–∞ –º–æ–¥–µ–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
fi

# ====== –ó–ê–ü–£–°–ö –°–ï–†–í–ò–°–û–í –í –§–û–ù–û–í–û–ú –†–ï–ñ–ò–ú–ï ======

echo "üö¶ –ó–∞–ø—É—Å–∫–∞–µ–º Redis..."
redis-server --daemonize yes
sleep 2 # –î–∞–µ–º Redis –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫, —á—Ç–æ–±—ã Celery –º–æ–≥ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è

# –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–µ–º–æ–Ω–∞
wait_for_daemon() {
    local max_wait=300  # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 300 —Å–µ–∫—É–Ω–¥ (5 –º–∏–Ω—É—Ç)
    local elapsed=0
    local check_interval=10
    
    echo "‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ inference –¥–µ–º–æ–Ω–∞ (–º–∞–∫—Å–∏–º—É–º ${max_wait}—Å)..."
    
    while [ $elapsed -lt $max_wait ]; do
        if [ -f "/workspace/LTX-Video/daemon_ready.flag" ]; then
            echo "‚úÖ –î–µ–º–æ–Ω –≥–æ—Ç–æ–≤! –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${elapsed}—Å"
            return 0
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–º–æ–Ω–∞ –µ—â–µ –∂–∏–≤–æ–π
        if ! pgrep -f "run_inference_daemon_official.py" > /dev/null; then
            echo "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –¥–µ–º–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            return 1
        fi
        
        echo "‚åõ –î–µ–º–æ–Ω –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è... ${elapsed}—Å (–æ—Å—Ç–∞–ª–æ—Å—å: $((max_wait - elapsed))—Å)"
        sleep $check_interval
        elapsed=$((elapsed + check_interval))
    done
    
    echo "‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ–º–æ–Ω–∞ (${max_wait}—Å)!"
    echo "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f LTX-Video/inference_daemon_official.log"
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
check_process() {
    local process_name=$1
    local log_file=$2
    local pid=$(pgrep -f "$process_name" | head -1)
    
    if [ -n "$pid" ]; then
        echo "‚úÖ $process_name –∑–∞–ø—É—â–µ–Ω (PID: $pid)"
        return 0
    else
        echo "‚ùå $process_name –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
        echo "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f $log_file"
        return 1
    fi
}

echo "üö¶ –ó–∞–ø—É—Å–∫–∞–µ–º inference –¥–µ–º–æ–Ω (–ª–æ–≥–∏ –≤ inference_daemon_official.log)..."
cd /workspace/LTX-Video
nohup env/bin/python run_inference_daemon_official.py > inference_daemon_official.log 2>&1 &
DAEMON_PID=$!
echo "üìã –î–µ–º–æ–Ω –∑–∞–ø—É—â–µ–Ω —Å PID: $DAEMON_PID"

# –î–∞–µ–º –¥–µ–º–æ–Ω—É –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω –Ω–µ –ø–∞–¥–∞–µ—Ç —Å—Ä–∞–∑—É
sleep 5
if ! kill -0 $DAEMON_PID 2>/dev/null; then
    echo "‚ùå –î–µ–º–æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏:"
    tail -n 20 inference_daemon_official.log
    exit 1
fi
echo "‚úÖ –î–µ–º–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω, –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π..."

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–µ–º–æ–Ω–∞
if wait_for_daemon; then
    echo "üéâ –î–µ–º–æ–Ω –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã..."
else
    echo "üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –¥–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    echo "üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞:"
    tail -n 10 inference_daemon_official.log
    exit 1
fi

echo "üö¶ –ó–∞–ø—É—Å–∫–∞–µ–º Celery –≤–æ—Ä–∫–µ—Ä (–ª–æ–≥–∏ –≤ celery_worker.log)..."
cd /workspace/LTX-Video
source env/bin/activate
nohup celery -A my_celery worker --loglevel=info --concurrency=1 > celery_worker.log 2>&1 &
sleep 3 # –î–∞–µ–º –≤–æ—Ä–∫–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é

echo "üö¶ –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä (–ª–æ–≥–∏ –≤ api_server.log)..."
nohup /workspace/LTX-Video/env/bin/python run_api_server.py > api_server.log 2>&1 &
sleep 2

echo "üö¶ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–ª–æ–≥–∏ –≤ frontend_server.log)..."
nohup /workspace/LTX-Video/env/bin/python run_frontend_server.py > frontend_server.log 2>&1 &

echo -e "\\n\\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 3

# –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
check_process "run_inference_daemon_official.py" "inference_daemon_official.log"
check_process "celery.*my_celery" "celery_worker.log"  
check_process "run_api_server.py" "api_server.log"
check_process "run_frontend_server.py" "frontend_server.log"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–µ–º–æ–Ω–∞
if [ -f "/workspace/LTX-Video/daemon_ready.flag" ]; then
    READY_TIME=$(cat /workspace/LTX-Video/daemon_ready.flag | cut -d: -f2)
    echo "üèÅ Inference –¥–µ–º–æ–Ω –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (–≤—Ä–µ–º—è: $(date -d @$READY_TIME))"
else
    echo "‚ö†Ô∏è –§–∞–π–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–µ–º–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
echo "üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã:"
if ss -tlnp | grep -q ":8000"; then
    echo "‚úÖ API —Å–µ—Ä–≤–µ—Ä (–ø–æ—Ä—Ç 8000)"
else
    echo "‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8000"
fi

if ss -tlnp | grep -q ":8002"; then
    echo "‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä (–ø–æ—Ä—Ç 8002)"
else
    echo "‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8002"
fi

echo "--------------------------------------------------------"
echo "‚û°Ô∏è  –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://<–í–ê–®_IP>:8002/frontend.html"
echo "‚û°Ô∏è  API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://<–í–ê–®_IP>:8000/docs"
echo "--------------------------------------------------------"
echo "üëÄ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   tail -f inference_daemon_official.log"
echo "   tail -f celery_worker.log"
echo "   tail -f api_server.log"
echo "   tail -f frontend_server.log"
echo "--------------------------------------------------------"
echo "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞ (–∏ –≤—Å–µ—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤) –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"

# –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ - –¥–µ—Ä–∂–∏–º —Å–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–Ω—ã–º
echo "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: –¥–µ—Ä–∂–∏–º startup –∞–∫—Ç–∏–≤–Ω—ã–º..."
echo "üìä –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"

# –î–µ—Ä–∂–∏–º —Å–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–Ω—ã–º, —á—Ç–æ–±—ã –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –≤–º–µ—Å—Ç–æ tail -f /dev/null –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
while true; do
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∂–∏–≤—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    if ! pgrep -f "run_inference_daemon_official.py" > /dev/null; then
        echo "‚ö†Ô∏è Inference –¥–µ–º–æ–Ω —É–ø–∞–ª! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º..."
        cd /workspace/LTX-Video
        nohup env/bin/python run_inference_daemon_official.py > inference_daemon_restart.log 2>&1 &
    fi
    
    if ! pgrep -f "celery.*my_celery" > /dev/null; then
        echo "‚ö†Ô∏è Celery –≤–æ—Ä–∫–µ—Ä —É–ø–∞–ª! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º..."
        cd /workspace/LTX-Video
        source env/bin/activate
        nohup celery -A my_celery worker --loglevel=info --concurrency=1 > celery_worker_restart.log 2>&1 &
    fi
    
    if ! pgrep -f "run_api_server.py" > /dev/null; then
        echo "‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä —É–ø–∞–ª! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º..."
        cd /workspace/LTX-Video
        nohup /workspace/LTX-Video/env/bin/python run_api_server.py > api_server_restart.log 2>&1 &
    fi
done
